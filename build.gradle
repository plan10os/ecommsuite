plugins {
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("io.micronaut.application") version "3.7.0"
    id("com.google.cloud.tools.jib") version "2.8.0"
    id("org.asciidoctor.jvm.convert") version "3.3.2"
    id("io.micronaut.aot") version "3.7.0"
}

version = "0.1"
group = "com.ltmg"

apply from: "gradle/asciidoc.gradle"
repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor("io.dekorate:halkyon-annotations")
    annotationProcessor("io.dekorate:jaeger-annotations")
    annotationProcessor("io.dekorate:knative-annotations")
    annotationProcessor("io.dekorate:kubernetes-annotations")
    annotationProcessor("io.dekorate:prometheus-annotations")
    annotationProcessor("io.dekorate:servicecatalog-annotations")
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.data:micronaut-data-document-processor")
    annotationProcessor("io.micronaut.jaxrs:micronaut-jaxrs-processor")
    annotationProcessor("io.micronaut.micrometer:micronaut-micrometer-annotation")
    annotationProcessor("io.micronaut.microstream:micronaut-microstream-annotations")
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    annotationProcessor("io.micronaut.tracing:micronaut-tracing-opentelemetry-annotation")
    implementation("com.agorapulse:micronaut-permissions:1.0.2-micronaut-3.0")
    implementation("com.agorapulse:micronaut-worker:1.2.2-micronaut-3.0")
    implementation("com.oracle.coherence.ce:coherence:${coherenceVersion}")
    implementation("com.oracle.coherence.ce:coherence-java-client:${coherenceVersion}")
    implementation("info.novatec:micronaut-camunda-bpm-feature:2.10.0")
    implementation("info.novatec:micronaut-camunda-external-client-feature:2.9.0")
    implementation("info.novatec:micronaut-zeebe-client-feature:1.10.0")
    implementation("io.dekorate:halkyon-annotations")
    implementation("io.dekorate:jaeger-annotations")
    implementation("io.dekorate:knative-annotations")
    implementation("io.dekorate:kubernetes-annotations")
    implementation("io.dekorate:prometheus-annotations")
    implementation("io.dekorate:servicecatalog-annotations")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut:micronaut-management")
    implementation("io.micronaut.aws:micronaut-aws-apigateway")
    implementation("io.micronaut.aws:micronaut-aws-parameter-store")
    implementation("io.micronaut.aws:micronaut-aws-sdk-v2")
    implementation("io.micronaut.aws:micronaut-aws-secretsmanager")
    implementation("io.micronaut.beanvalidation:micronaut-hibernate-validator")
    implementation("io.micronaut.cache:micronaut-cache-hazelcast")
    implementation("io.micronaut.coherence:micronaut-coherence")
    implementation("io.micronaut.coherence:micronaut-coherence-data")
    implementation("io.micronaut.coherence:micronaut-coherence-distributed-configuration")
    implementation("io.micronaut.coherence:micronaut-coherence-grpc-client")
    implementation("io.micronaut.coherence:micronaut-coherence-session")
    implementation("io.micronaut.data:micronaut-data-mongodb")
    implementation("io.micronaut.discovery:micronaut-discovery-client")
    implementation("io.micronaut.elasticsearch:micronaut-elasticsearch")
    implementation("io.micronaut.email:micronaut-email-amazon-ses")
    implementation("io.micronaut.email:micronaut-email-mailjet")
    implementation("io.micronaut.email:micronaut-email-sendgrid")
    implementation("io.micronaut.email:micronaut-email-template")
    implementation("io.micronaut.flyway:micronaut-flyway")
    implementation("io.micronaut.graphql:micronaut-graphql")
    implementation("io.micronaut.jaxrs:micronaut-jaxrs-server")
    implementation("io.micronaut.jaxrs:micronaut-jaxrs-server-security")
    implementation("io.micronaut.jms:micronaut-jms-activemq-artemis")
    implementation("io.micronaut.jms:micronaut-jms-core")
    implementation("io.micronaut.jms:micronaut-jms-sqs")
    implementation("io.micronaut.jmx:micronaut-jmx")
    implementation("io.micronaut.kafka:micronaut-kafka")
    implementation("io.micronaut.kafka:micronaut-kafka-streams")
    implementation("io.micronaut.kubernetes:micronaut-kubernetes-client-reactor")
    implementation("io.micronaut.kubernetes:micronaut-kubernetes-client-rxjava2")
    implementation("io.micronaut.kubernetes:micronaut-kubernetes-discovery-client")
    implementation("io.micronaut.kubernetes:micronaut-kubernetes-informer")
    implementation("io.micronaut.micrometer:micronaut-micrometer-core")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-appoptics")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-atlas")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-cloudwatch")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-datadog")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-dynatrace")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-elastic")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-ganglia")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-graphite")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-humio")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-influx")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-kairos")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-new-relic")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-prometheus")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-stackdriver")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-statsd")
    implementation("io.micronaut.microstream:micronaut-microstream")
    implementation("io.micronaut.microstream:micronaut-microstream-annotations")
    implementation("io.micronaut.microstream:micronaut-microstream-cache")
    implementation("io.micronaut.mongodb:micronaut-mongo-reactive")
    implementation("io.micronaut.mongodb:micronaut-mongo-sync")
    implementation("io.micronaut.mqtt:micronaut-mqttv3")
    implementation("io.micronaut.mqtt:micronaut-mqttv5")
    implementation("io.micronaut.multitenancy:micronaut-multitenancy")
    implementation("io.micronaut.nats:micronaut-nats")
    implementation("io.micronaut.netflix:micronaut-netflix-hystrix")
    implementation("io.micronaut.objectstorage:micronaut-object-storage-aws")
    implementation("io.micronaut.problem:micronaut-problem-json")
    implementation("io.micronaut.rabbitmq:micronaut-rabbitmq")
    implementation("io.micronaut.reactor:micronaut-reactor")
    implementation("io.micronaut.reactor:micronaut-reactor-http-client")
    implementation("io.micronaut.redis:micronaut-redis-lettuce")
    implementation("io.micronaut.rss:micronaut-rss")
    implementation("io.micronaut.security:micronaut-security")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut.security:micronaut-security-oauth2")
    implementation("io.micronaut.security:micronaut-security-session")
    implementation("io.micronaut.serde:micronaut-serde-bson")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    implementation("io.micronaut.serde:micronaut-serde-jsonp")
    implementation("io.micronaut.sql:micronaut-hibernate-jpa")
    implementation("io.micronaut.sql:micronaut-hibernate-reactive")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.sql:micronaut-vertx-mysql-client")
    implementation("io.micronaut.sql:micronaut-vertx-pg-client")
    implementation("io.micronaut.toml:micronaut-toml")
    implementation("io.micronaut.tracing:micronaut-tracing-opentelemetry-http")
    implementation("io.micronaut.views:micronaut-views-handlebars")
    implementation("io.micronaut.xml:micronaut-jackson-xml")
    implementation("io.opentelemetry:opentelemetry-exporter-jaeger")
    implementation("io.opentelemetry:opentelemetry-exporter-logging")
    implementation("io.opentelemetry:opentelemetry-exporter-otlp")
    implementation("io.opentelemetry:opentelemetry-exporter-zipkin")
    implementation("io.opentelemetry:opentelemetry-extension-aws")
    implementation("io.opentelemetry.contrib:opentelemetry-aws-xray")
    implementation("io.opentelemetry.instrumentation:opentelemetry-aws-sdk-2.2")
    implementation platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom-alpha:1.14.0-alpha")
    implementation("io.reactivex.rxjava2:rxjava")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("io.vertx:vertx-mysql-client")
    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation("software.amazon.awssdk:dynamodb")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.flywaydb:flyway-mysql")
    runtimeOnly("org.mariadb.jdbc:mariadb-java-client")
    runtimeOnly("org.mongodb:mongodb-driver-reactivestreams")
    testAnnotationProcessor("io.micronaut.jaxrs:micronaut-jaxrs-processor")
    testImplementation("com.agorapulse:gru-micronaut:1.2.5")
    testImplementation("org.assertj:assertj-core")
    testImplementation("org.awaitility:awaitility:4.2.0")
    testImplementation("org.camunda.bpm:camunda-bpm-assert:7.18.0")
    testImplementation("org.mockito:mockito-core")
    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.testcontainers:localstack")
    testImplementation("org.testcontainers:mariadb")
    testImplementation("org.testcontainers:mongodb")
    testImplementation("org.testcontainers:testcontainers")
    developmentOnly("com.agorapulse:micronaut-console:2.0.1-micronaut-3.0")
    developmentOnly("io.micronaut.microstream:micronaut-microstream-rest")
    developmentOnly("org.codehaus.groovy:groovy")
    implementation("io.micronaut:micronaut-validation")

}


application {
    mainClass.set("com.ltmg.Application")
}
java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

tasks {
    dockerBuild {
        images = ["${System.env.DOCKER_IMAGE ?: project.name}:$project.version"]
    }

    dockerBuildNative {
        images = ["${System.env.DOCKER_IMAGE ?: project.name}:$project.version"]
    }
    jib {
        to {
            image = "gcr.io/myapp/jib-image"
        }
    }
}
graalvmNative.toolchainDetection = false
micronaut {
    runtime("lambda_java")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.ltmg.*")
    }
    testResources {
        additionalModules.add("hibernate-reactive-mariadb")
        sharedServer = true
    }
    aot {
        // Please review carefully the optimizations enabled below
        // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
        optimizeServiceLoading = true
        convertYamlToJava = true
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
    }
}


tasks.named("dockerfileNative") {
    args(
        "-XX:MaximumHeapSizePercent=80",
        "-Dio.netty.allocator.numDirectArenas=0",
        "-Dio.netty.noPreferDirect=true"
    )
}



configurations.all {
    resolutionStrategy.dependencySubstitution {
        substitute(module("io.micronaut:micronaut-jackson-databind"))
            .using(module("io.micronaut.serde:micronaut-serde-bson:1.5.0"))
        substitute(module("io.micronaut:micronaut-jackson-core"))
            .using(module("io.micronaut.serde:micronaut-serde-jsonp:1.5.0"))
        substitute(module("io.micronaut:micronaut-jackson-databind"))
            .using(module("jakarta.json.bind:jakarta.json.bind-api:2.0.0"))
        substitute(module("io.micronaut:micronaut-jackson-core"))
            .using(module("io.micronaut.serde:micronaut-serde-bson:1.5.0"))
        substitute(module("io.micronaut:micronaut-jackson-databind"))
            .using(module("io.micronaut.serde:micronaut-serde-jackson:1.5.0"))
    }
}

